name: Build & Deploy (Maven + Docker + GKE)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  # Docker Hub
  REGISTRY: docker.io
  IMAGE_OWNER: ${{ secrets.DOCKER_USERNAME }}

  # GKE
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: k8s-deployment
  GKE_ZONE: us-central1-c           # or your region/zone
  K8S_NAMESPACE: patient-ms         # must exist (we created this in k8s/00-namespace.yml)

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service:
          - api-gateway
          - auth-service
          - patient-service
          - analytics-service
          - billing-service

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Temurin JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"
          cache: maven

      - name: Maven package (skip tests)
        working-directory: ./${{ matrix.service }}
        run: mvn -B -ntp clean package -DskipTests

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
       # Normalize username to lowercase for image push
      - name: Normalize docker owner
        run: |
          OWNER_LC="$(echo '${{ secrets.DOCKER_USERNAME }}' | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]')"
          echo "IMAGE_OWNER=$OWNER_LC" >> $GITHUB_ENV
          
        # ðŸ”§ This fixes the cache error
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver: docker-container

      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ matrix.service }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ matrix.service }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ matrix.service }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ matrix.service }}:buildcache,mode=max

    deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    env:
      REGISTRY: docker.io
      K8S_NAMESPACE: patient-ms

    steps:
      - name: Checkout manifests
        uses: actions/checkout@v4

      - name: Normalize docker owner
        run: |
          OWNER_LC="$(echo '${{ secrets.DOCKER_USERNAME }}' | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]')"
          echo "IMAGE_OWNER=$OWNER_LC" >> $GITHUB_ENV

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GKE_SA_KEY }}

      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      - name: Apply k8s manifests
        run: |
          kubectl apply -f k8s/00-namespace.yml
          kubectl apply -f k8s --namespace "$K8S_NAMESPACE"

      - name: Update deployment images to this commit
        env:
          SHA: ${{ github.sha }}
          NS: ${{ env.K8S_NAMESPACE }}
        run: |
          kubectl -n "$NS" set image deployment/api-gateway \
            api-gateway=${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/api-gateway:${SHA}
          kubectl -n "$NS" set image deployment/auth-service \
            auth-service=${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/auth-service:${SHA}
          kubectl -n "$NS" set image deployment/patient-service \
            patient-service=${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/patient-service:${SHA}
          kubectl -n "$NS" set image deployment/analytics-service \
            analytics-service=${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/analytics-service:${SHA}
          kubectl -n "$NS" set image deployment/billing-service \
            billing-service=${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/billing-service:${SHA}

      - name: Wait for rollout
        env:
          NS: ${{ env.K8S_NAMESPACE }}
        run: |
          kubectl -n "$NS" rollout status deployment/api-gateway
          kubectl -n "$NS" rollout status deployment/auth-service
          kubectl -n "$NS" rollout status deployment/patient-service
          kubectl -n "$NS" rollout status deployment/analytics-service
          kubectl -n "$NS" rollout status deployment/billing-service

      # Helpful debug if something still fails
     - name: Dump diagnostics on failure
  if: failure()
  env:
    NS: ${{ env.K8S_NAMESPACE }}
  run: |
    set -eu
    echo "===== Namespaced summary ====="
    kubectl -n "$NS" get deploy,rs,po,svc,cm,secret | sed -n '1,200p' || true

    for d in api-gateway auth-service patient-service analytics-service billing-service; do
      echo ""
      echo "==================== $d ===================="
      echo "-- Images configured --"
      kubectl -n "$NS" get deploy "$d" -o jsonpath='{.spec.template.spec.containers[*].name}{" => "}{.spec.template.spec.containers[*].image}{"\n"}' || true

      echo "-- Deployment conditions --"
      kubectl -n "$NS" get deploy "$d" -o jsonpath='{range .status.conditions[*]}{.type}={.status} reason={.reason} msg="{.message}"{"\n"}{end}' || true
      echo ""

      echo "-- Rollout history --"
      kubectl -n "$NS" rollout history deploy/"$d" || true

      echo "-- ReplicaSets for this deployment --"
      kubectl -n "$NS" get rs -l app="$d" --show-labels || true

      echo "-- Pods for this deployment --"
      kubectl -n "$NS" get pods -l app="$d" -o wide || true

      # Describe and logs for each pod
      for p in $(kubectl -n "$NS" get pods -l app="$d" -o name | cut -d/ -f2); do
        echo "---- DESCRIBE $p ----"
        kubectl -n "$NS" describe pod "$p" || true

        echo "---- CONTAINER STATUSES $p ----"
        kubectl -n "$NS" get pod "$p" -o jsonpath='{range .status.containerStatuses[*]}{.name}:"ready="}{.ready}{" restarted="}{.restartCount}{" reason="}{.state.waiting.reason}{"\n"}{end}' || true
        echo ""

        echo "---- LOGS (current) $p ----"
        kubectl -n "$NS" logs "$p" --tail=200 || true

        echo "---- LOGS (previous, if restarted) $p ----"
        kubectl -n "$NS" logs "$p" --previous --tail=100 || true
      done

      echo "-- Recent events (filtered) --"
      kubectl -n "$NS" get events --sort-by=.lastTimestamp | tail -n 200 || true
      echo "============================================"
    done
