name: Build & Deploy (Maven + Docker + GKE)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  # Docker Hub
  REGISTRY: docker.io
  IMAGE_OWNER: ${{ secrets.DOCKER_USERNAME }}

  # GKE
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: k8s-deployment
  GKE_ZONE: us-central1-c
  K8S_NAMESPACE: patient-ms

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service:
          - api-gateway
          - auth-service
          - patient-service
          - analytics-service
          - billing-service
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Temurin JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"
          cache: maven

      - name: Maven package (skip tests)
        working-directory: ./${{ matrix.service }}
        run: mvn -B -ntp clean package -DskipTests

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Normalize docker owner
        run: |
          OWNER_LC="$(echo '${{ secrets.DOCKER_USERNAME }}' | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]')"
          echo "IMAGE_OWNER=$OWNER_LC" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver: docker-container

      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ matrix.service }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ matrix.service }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ matrix.service }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ matrix.service }}:buildcache,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    env:
      REGISTRY: docker.io
      K8S_NAMESPACE: patient-ms
      PROJECT_ID: ${{ secrets.GKE_PROJECT }}
    steps:
      - name: Checkout manifests
        uses: actions/checkout@v4

      - name: Normalize docker owner
        run: |
          OWNER_LC="$(echo '${{ secrets.DOCKER_USERNAME }}' | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]')"
          echo "IMAGE_OWNER=$OWNER_LC" >> $GITHUB_ENV

      # ---- GKE auth & context ----
      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GKE_SA_KEY }}

      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      # ---- Apply infra first and wait ----
      - name: Apply base (namespace + infra)
        run: |
          set -eux
          kubectl apply -f k8s/00-namespace.yml
          kubectl apply -f k8s/01-postgres.yml --namespace "$K8S_NAMESPACE"
          kubectl apply -f k8s/02-kafka-dev.yml --namespace "$K8S_NAMESPACE"

      - name: Wait for infra to be Ready
        env:
          NS: ${{ env.K8S_NAMESPACE }}
        run: |
          set -eux
          # <<< MODIFIED: robust waiting logic that works if resource is Deployment or StatefulSet.
          # Reason: your failure was waiting for a Deployment 'postgres' that likely is a StatefulSet,
          # or pods were Ready but 'available' condition never flipped. We try rollout for both kinds,
          # then fall back to pod readiness by label. Timeouts increased for first-time image pulls.

          # ---- POSTGRES ----
          kubectl -n "$NS" rollout status deployment/postgres --timeout=900s || \
          kubectl -n "$NS" rollout status statefulset/postgres --timeout=900s || \
          kubectl -n "$NS" wait --for=condition=ready pod -l app=postgres --timeout=900s

          # ---- KAFKA ---- (adjust label/name if different)
          kubectl -n "$NS" rollout status deployment/kafka --timeout=900s || \
          kubectl -n "$NS" rollout status statefulset/kafka --timeout=900s || \
          kubectl -n "$NS" wait --for=condition=ready pod -l app=kafka --timeout=900s

      # ---- Apply app services ----
      - name: Apply services
        run: |
          set -eux
          kubectl apply -f k8s/10-api-gateway.yml --namespace "$K8S_NAMESPACE"
          kubectl apply -f k8s/11-auth-service.yml --namespace "$K8S_NAMESPACE"
          kubectl apply -f k8s/12-patient-service.yml --namespace "$K8S_NAMESPACE"
          kubectl apply -f k8s/13-analytics-service.yml --namespace "$K8S_NAMESPACE"
          kubectl apply -f k8s/14-billing-service.yml --namespace "$K8S_NAMESPACE"

      - name: Update deployment images to this commit
        env:
          SHA: ${{ github.sha }}
          NS: ${{ env.K8S_NAMESPACE }}
        run: |
          set -eux
          for d in api-gateway auth-service patient-service analytics-service billing-service; do
            kubectl -n "$NS" set image "deployment/$d" "$d"=${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/$d:${SHA}
          done

      - name: Wait for rollout
        env:
          NS: ${{ env.K8S_NAMESPACE }}
        run: |
          set -eux
          for d in api-gateway auth-service patient-service analytics-service billing-service; do
            kubectl -n "$NS" rollout status "deployment/$d" --timeout=180s
          done

      # ---- Helpful diagnostics if anything fails ----
      - name: Dump diagnostics on failure
        if: failure()
        env:
          NS: ${{ env.K8S_NAMESPACE }}
        run: |
          set -eu
          echo "===== Namespaced summary ====="
          kubectl -n "$NS" get deploy,statefulset,po,svc,cm,secret,pvc | sed -n '1,200p' || true  # <<< MODIFIED: include sts + pvc for infra visibility

          # <<< MODIFIED: add infra (postgres, kafka) deep-dive for easier root-cause
          for d in postgres kafka api-gateway auth-service patient-service analytics-service billing-service; do
            echo ""
            echo "==================== $d ===================="
            echo "-- Workload spec (if exists) --"
            kubectl -n "$NS" get deploy "$d" -o yaml | sed -n '1,120p' || true
            kubectl -n "$NS" get statefulset "$d" -o yaml | sed -n '1,120p' || true

            echo "-- Images configured --"
            kubectl -n "$NS" get deploy "$d" -o jsonpath='{.spec.template.spec.containers[*].name}{" => "}{.spec.template.spec.containers[*].image}{"\n"}' || true

            echo "-- Deployment conditions --"
            kubectl -n "$NS" get deploy "$d" -o jsonpath='{range .status.conditions[*]}{.type}={.status} reason={.reason} msg="{.message}"{"\n"}{end}' || true
            echo ""

            echo "-- Pods --"
            kubectl -n "$NS" get pods -l app="$d" -o wide || true

            for p in $(kubectl -n "$NS" get pods -l app="$d" -o name | cut -d/ -f2); do
              echo "---- DESCRIBE $p ----"
              kubectl -n "$NS" describe pod "$p" || true

              echo "---- CONTAINER STATUSES $p ----"
              kubectl -n "$NS" get pod "$p" -o jsonpath='{range .status.containerStatuses[*]}{.name}:"ready="}{.ready}{" restarted="}{.restartCount}{" reason="}{.state.waiting.reason}{"\n"}{end}' || true
              echo ""

              echo "---- LOGS (current) $p ----"
              kubectl -n "$NS" logs "$p" --tail=200 || true

              echo "---- LOGS (previous, if restarted) $p ----"
              kubectl -n "$NS" logs "$p" --previous --tail=100 || true
            done
          done

          echo "-- Recent events (filtered) --"
          kubectl -n "$NS" get events --sort-by=.lastTimestamp | tail -n 200 || true
