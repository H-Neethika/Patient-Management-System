name: Build & Deploy (Maven + Docker + GKE)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  # Docker Hub
  REGISTRY: docker.io
  IMAGE_OWNER: ${{ secrets.DOCKER_USERNAME }}

  # GKE
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: k8s-deployment
  GKE_ZONE: us-central1-c           # or your region/zone
  K8S_NAMESPACE: patient-ms         # must exist (we created this in k8s/00-namespace.yml)

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service:
          - api-gateway
          - auth-service
          - patient-service
          - analytics-service
          - billing-service

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Temurin JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"
          cache: maven

      - name: Maven package (skip tests)
        working-directory: ./${{ matrix.service }}
        run: mvn -B -ntp clean package -DskipTests

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
       # Normalize username to lowercase for image push
      - name: Normalize docker owner
        run: |
          OWNER_LC="$(echo '${{ secrets.DOCKER_USERNAME }}' | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]')"
          echo "IMAGE_OWNER=$OWNER_LC" >> $GITHUB_ENV
          
        # ðŸ”§ This fixes the cache error
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver: docker-container

      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ matrix.service }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ matrix.service }}:${{ github.sha }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ matrix.service }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ matrix.service }}:buildcache,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout manifests
        uses: actions/checkout@v4

       # Normalize again (jobs don't share env)
      - name: Normalize docker owner
        run: |
          OWNER_LC="$(echo '${{ secrets.DOCKER_USERNAME }}' | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]')"
          echo "IMAGE_OWNER=$OWNER_LC" >> $GITHUB_ENV


      # Authenticate to Google Cloud with your service account JSON in the secret
      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GKE_SA_KEY }}

      # Fetch kube credentials for the target cluster
      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      # Apply (or create/update) all K8s objects first
      - name: Apply k8s manifests
        run: |
          kubectl apply -f k8s/00-namespace.yml
          kubectl apply -f k8s --namespace $K8S_NAMESPACE

      # Point each deployment to the freshly built SHA-tagged images
      - name: Update deployment images to this commit
        env:
          SHA: ${{ github.sha }}
          OWNER: ${{ secrets.DOCKER_USERNAME }}
          NS: ${{ env.K8S_NAMESPACE }}
        run: |
          kubectl -n $NS set image deployment/api-gateway \
            api-gateway=${{ env.REGISTRY }}/${OWNER}/api-gateway:${SHA}
          kubectl -n $NS set image deployment/auth-service \
            auth-service=${{ env.REGISTRY }}/${OWNER}/auth-service:${SHA}
          kubectl -n $NS set image deployment/patient-service \
            patient-service=${{ env.REGISTRY }}/${OWNER}/patient-service:${SHA}
          kubectl -n $NS set image deployment/analytics-service \
            analytics-service=${{ env.REGISTRY }}/${OWNER}/analytics-service:${SHA}
          kubectl -n $NS set image deployment/billing-service \
            billing-service=${{ env.REGISTRY }}/${OWNER}/billing-service:${SHA}

      # (Optional) Wait until everything is rolled out
      - name: Wait for rollout
        env:
          NS: ${{ env.K8S_NAMESPACE }}
        run: |
          kubectl -n $NS rollout status deployment/api-gateway
          kubectl -n $NS rollout status deployment/auth-service
          kubectl -n $NS rollout status deployment/patient-service
          kubectl -n $NS rollout status deployment/analytics-service
          kubectl -n $NS rollout status deployment/billing-service
          
